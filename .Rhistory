cr <- corr("Datafiles/specdata/", 1000)
n
cr <- sort(cr)
print(c(n, round(cr, 4)))
x <- list(a = 1:5, b = rnorm(100))
x
a
$a
x$a
x$b
lapply(x, mean)
x <- list(a = 1:5, b = rnorm(100))
lapply(x, mean)
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
x
lapply(x, function(elt) elt[,1])
lapply(x, function(elt), elt[,1])
x <- matrix(rnorm(200), 20, 10)
x
?rnorm
apply(x, 1, sum)
rowsums(x)
rowSums(x)
apply(x, 1, quantile, probs = c(0.25, 0.75))
apply(x, 1, quantile, probs = c(0.25, 0.75))
?quantile
apply(x, 1, quantile, probs2 = c(0.25, 0.75))
a <- array(rnorm(2*2*10), c(2,2,10))
a
apply(a, c(1, 2), mean)
rowMeans(a, dims = 2)
rowMeans(a, dims2 = 2)
rnorm(5, 1, 2)
?rnorm
f <- gl(3, 10)
f
?gl
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
tapply(x, f, range)
tapply(x, f, range, simplify = TRUE)
tapply(x, f, range, simplify = FALSE)
?tapply
?lapply
?str
str(split)
?str
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
f <- gl(3, 10)
split(x, f)
?gl
f
lapply(split(x, f), mean)
tapply(x, f, mean)
library(datasets)
airquality
getwd()
dir
dir()
search()
head(airquality)
?head()
head(airquality, 7)
head(airquality, 1)
airquality
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/corr.R')
?library()
s <- split(airquality, airquality$Month)
s
lapply(s, function(x) colmeans(x[, (c("Ozone", "Solar.R", "Wind"))]))
lapply(s, function(x) colMeans(x[, (c("Ozone", "Solar.R", "Wind"))]))
sapply(s, function(x) colMeans(x[, (c("Ozone", "Solar.R", "Wind"))]))
sapply(s, function(x) colMeans(x[, (c("Ozone", "Solar.R", "Wind"))], na.rm = TRUE))
x <- rnorm(10)
x
x <- rnorm(10, 2)
x
x <- rnorm(10)
?rnorm
x <- rnorm(10)
x
f1 <- gl(2, 5)
f1
f2 <- gl(5, 2)
f2
interaction(f1, f2)
str(split(x, list(f1, f2)))
?str
?list
x
f1
f2
str(split(x, list(f1, f2)))
x[1,1]
x
x
split(x, list(f1, f2))
split(x, f1)
split(x, f2)
split(x, list(f1, f2))
split(x, list(f2)
split(x, list(f1)
split(x, list(f1))
split(x, list(f2))
split(x, list(f1, f2))
str(split(x, list(f1, f2)))
str(split(x, list(f1)))
str(split(x, list(f2)))
str(split(x, list(f1, f2)))
x
split(x, list(f1, f2))
split(x, list(f1))
split(x, f1)
str(split(x, f1))
str(split(x, list(f1, f2), drop = TRUE))
printmessage <- function(x) {
if(x < 0)
print("x is greater than zero")
else
print("x is less thanor equal  zero")
invisible(x)
}
printmessage(9)
printmessage <- function(x) {
if(x > 0)
print("x is greater than zero")
else
print("x is less tha nor equal  zero")
invisible(x)
}
printmessage(9)
printmessage(-9)
printmessage <- function(x) {
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal  zero")
invisible(x)
}
printmessage(-9)
printmessage <- function(x) {
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal  zero")
#invisible(x)
}
printmessage(-9)
printmessage(f)
printmessage(NA)
printmessage(NA)
printmessage(f)
?cat
rm(x)
mean(x)
traceback()
printmessage(f)
traceback()
y
lm(x, y)
traceback()
lm(y - x)
traceback()
y
x
?lm()
lm(y ~ x)
traceback()
debug(printmessage)
printmessage(f)
printmessage(f)
printmessage(f)
options(error = recover)
read.csv("nosucfile")
1
2
0
x
printmessage(f)
debuggingState(on = FALSE)
debuggingState(FALSE)
printmessage(f)
printmessage(f)
quit
exit
library(datasets)
data(iris)
?iris
iris
colMeans(iris$Sepal.Length na.rm = TRUE)
colMeans(iris, iris$Sepal.Length na.rm = TRUE)
colMeans(iris, iris$Sepal.Length, na.rm = TRUE)
colMeans(iris$Sepal.Length, na.rm = TRUE)
lapply(iris, colMeans(iris$Sepal.Length, na.rm = TRUE))
lapply(iris, mean)
lapply(iris, mean, na.rm = TRUE)
?runif
lapply(iris, mean)
sapply(iris, mean)
lapply(iris, function(iris) colMeans(iris[, "Sepal.Length"], na.rm = TRUE))
class(iris)
colMeans(iris)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:5], 2, mean)
apply(iris[, 1:4], 2, mean)
aaply(iris, 1, mean())
apply(iris, 1, mean())
data("mtcars")
mtcars
mtcars
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mtcars, 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
lapply(mtcars, mean)
split(mtcars, mtcars$cyl)
tapply(mtcars$hp, mtcars$cyl, mean)
tapply(mtcars$hp, 4, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429 - 82.63636
debug(ls)
ls()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
?rbind
a <- matrix(1:12, nrow=3, ncol=4)
a
solv(a)
solve(a)
a <- matrix(1:9, nrow=3, ncol=3)
a
solve(a)
a <- matrix(1:4, nrow=2, ncol=2)
a
solve(a)
?solve
## Your assignment is to write a pair of functions that cache the inverse of a matrix.
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
## x must be a square invertible vector
## The function returns a list with functions to
## 1. set the value of the list
## 2. get the value of the list
## 3. calculate the inverse of x
## 4. get the inverse of x
inv <- NULL
set <- function(y) {
## This function just assigns values to objects outside the current environment
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) inv <<- inverse
getinv <- function() inv
list(set = set, get = get,
setinv = setminv,
getinv = getinv)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
set.seed(1110201)
r = rnorm(1000000)
r
mat1 = matrix(r, nrow=1000, ncol=1000)
mat1
cacheSolve(mat1)
temp = makeCacheMatrix(mat1)
temp <- makeCacheMatrix(mat1)
mat1
temp <- makeCacheMatrix(mat1)
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgrammingAssignment2/cachematrix.R')
temp <- makeCacheMatrix(mat1)
cacheSolve(temp)
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgrammingAssignment2/cachematrix.R')
cacheSolve(temp)
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgrammingAssignment2/cachematrix.R')
cacheSolve(temp)
temp <- makeCacheMatrix(mat1)
cacheSolve(temp)
test = function(mat){
## @mat: an invertible matrix
temp = makeCacheMatrix(mat)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
}
test(mat1)
test(mat1)
test(mat1)
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgrammingAssignment2/cachematrix.R')
plus <- function (x, y) x + y
plus(1, 2)
m <- x$getmean()
inv <- x$getinv()
inv
test(mat1)
inv
test(mat1)
cacheSolve(temp)
cacheSolve(temp)
debugSource('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgrammingAssignment2/cachematrix.R')
cacheSolve(temp)
debugSource('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgrammingAssignment2/cachematrix.R')
debugSource('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgrammingAssignment2/cachematrix.R')
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
debugSource('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgrammingAssignment2/cachematrix.R')
temp = makeCacheMatrix(mat)
debugSource('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgrammingAssignment2/cachematrix.R')
cacheSolve(temp)
debugSource('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgrammingAssignment2/cachematrix.R')
test = function(mat){
## @mat: an invertible matrix
temp = makeCacheMatrix(mat)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
}
test(mat1)
debugSource('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgrammingAssignment2/cachematrix.R')
debugSource('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgrammingAssignment2/cachematrix.R')
debugSource('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgrammingAssignment2/cachematrix.R')
test(mat1)
n
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgrammingAssignment2/cachematrix.R')
debug(cacheSolve)
test(mat1)
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgrammingAssignment2/cachematrix.R')
str(mat1)
str(cacheSolve)
str(test)
str(temp)
m <- matrix(rnorm(100), 10, 10)
m
str(m)
library(datasets)
aiquality
airquality
str(airquality)
split(airquality, airquality$Month)
str(s)
s <- split(airquality, airquality$Month)
str(s)
?qnorm()
qnorm(10, 1, 1)
qnorm(10)
rnorm(10, 1, 1)
dnorm(10, 1, 1)
dnorm(1:10, 1, 1)
qnorm(1:10, 1, 1)
x <- rnorm(10, 20 ,2)
x
summar(x)
summary(x)
str(x)
rpois(10, 1)
rpois(10, 1)
rpois(10, 1)
set.seed(1)
rpois(10, 1)
rpois(10, 1)
set.seed(1)
rpois(10, 1)
x <- rpois(10, 1)
summary(x)
ppois(1, 2)
ppois(1, 2)
ppois(2, 2)
ppois(2, 2)
rpois(2, 2)
ppois(2, 2)
ppois(4, 2)
ppois(6, 2)
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgrammingAssignment2/cachematrix.R')
set.seed(20)
x <- rnorm(100)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
y
summary(y)
plot(x, y)
str(x)
summary(x)
rnorm(100)
rnorm(10)
rnorm(10, 0, 2)
summary(e)
summary(y)
?rbinom()
set.seed(10)
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
x
str(x)
summary(x)
y <- 0.5 + 2 * x + e
summary(y)
plot(x,y)
y
x
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + +.3 * x
log.mu <- 0.5 + 0.3 * x
log.mu
str(log.mu)
summary(log.mu)
y <- rpois(100, exp(log.mu))
summary(y)
plot(x, y)
y
set.seed(1)
samle(1:10, 4)
sample(1:10, 4)
samle(1:10, 4)
sample(1:10, 4)
sample(1:10, 4)
sample(letters, 5)
?sample()
letters
str(letters)
summary(letters)
system.time(1 + 2)
system.time(1 + 2)
system.time(1 + 2)
system.time(wait(10))
summaryRprof()
lm(y ~ x)
sample.interval=10000
Rprof()
lm(y ~ x)
sample.interval=10000
summaryRprof()
Rprof()
Rprof(lm(y ~ x))
?Rprof()
Rprof()
Rprof(NULL)
Rprof(append = TRUE)
\dots
Rprof(tmp <- tempfile())
example(glm)
Rprof()
summaryRprof(tmp)
unlink(tmp)
Rprof(tmp <- tempfile())
example(glm)
Rprof()
summaryRprof(tmp)
?glm()
?example()
